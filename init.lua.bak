-- init.lua for Neovim
-- A minimalistic configuration with NvimTree, tabs/buffers, Telescope,
-- syntax highlighting, and autocompletion

-- Set leader key to space
vim.g.mapleader = " "
vim.g.maplocalleader = " "

-- Basic settings
vim.opt.number = true             -- Show line numbers
vim.opt.relativenumber = true     -- Show relative line numbers
vim.opt.termguicolors = true      -- Enable 24-bit RGB colors
vim.opt.shiftwidth = 2            -- Number of spaces for indentation
vim.opt.tabstop = 2               -- Number of spaces a tab counts for
vim.opt.expandtab = true          -- Use spaces instead of tabs
vim.opt.smartindent = true        -- Smart auto-indenting
vim.opt.wrap = false              -- Don't wrap lines
vim.opt.ignorecase = true         -- Ignore case when searching
vim.opt.smartcase = true          -- Override ignorecase when search includes uppercase
vim.opt.clipboard = "unnamedplus" -- Use system clipboard
vim.opt.splitbelow = true         -- Split below by default
vim.opt.splitright = true         -- Split right by default
vim.opt.showmode = false          -- Don't show mode in command line
vim.opt.scrolloff = 8             -- Start scrolling when 8 lines from edge
vim.opt.updatetime = 300          -- Faster completion

-- Bootstrap lazy.nvim
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    "git",
    "clone",
    "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable", -- latest stable release
    lazypath,
  })
end
vim.opt.rtp:prepend(lazypath)

-- Plugin specifications
require("lazy").setup({
  -- Rose Pine with persistent black background
  {
    "rose-pine/neovim",
    name = "rose-pine",
    lazy = false,
    priority = 1000,
    config = function()
      -- First load Rose Pine with default settings
      require("rose-pine").setup({
        variant = "main",
      })
      -- Set the colorscheme
      vim.cmd("colorscheme rose-pine")
      -- Override backgrounds to black for both active and inactive windows
      vim.api.nvim_set_hl(0, "Normal", { bg = "#000000" })
      vim.api.nvim_set_hl(0, "NormalNC", { bg = "#000000" })         -- Non-current windows
      vim.api.nvim_set_hl(0, "NormalFloat", { bg = "#000000" })
      vim.api.nvim_set_hl(0, "NvimTreeNormal", { bg = "#000000" })   -- NvimTree background
      vim.api.nvim_set_hl(0, "NvimTreeNormalNC", { bg = "#000000" }) -- NvimTree inactive
      -- Set background for file explorer specifically
      vim.api.nvim_create_autocmd("FileType", {
        pattern = "NvimTree",
        callback = function()
          vim.api.nvim_set_hl(0, "Normal", { bg = "#000000" })
          vim.api.nvim_set_hl(0, "NormalNC", { bg = "#000000" })
        end
      })
      -- Keep background black when switching buffers
      vim.api.nvim_create_autocmd("WinEnter", {
        callback = function()
          vim.api.nvim_set_hl(0, "Normal", { bg = "#000000" })
          vim.api.nvim_set_hl(0, "NormalNC", { bg = "#000000" })
        end
      })
      vim.opt.background = "dark"
    end,
  },
  {
    "nvim-tree/nvim-tree.lua",
    dependencies = {
      "nvim-tree/nvim-web-devicons",
    },
    config = function()
      require("nvim-tree").setup({
        disable_netrw = true,
        hijack_netrw = true,
        respect_buf_cwd = true,
        view = {
          width = 30,
        },
        renderer = {
          group_empty = true,
          icons = {
            show = {
              file = true,
              folder = true,
              folder_arrow = true,
              git = true,
            },
          },
        },
        filters = {
          dotfiles = false,
        },
      })
    end,
  },

  -- Bufferline for tab management
  {
    "akinsho/bufferline.nvim",
    dependencies = { "nvim-tree/nvim-web-devicons" },
    config = function()
      require("bufferline").setup({
        options = {
          mode = "buffers",
          separator_style = "thin",
          always_show_bufferline = true,
          show_buffer_close_icons = true,
          show_close_icon = false,
          color_icons = true,
        },
      })
    end,
  },

  -- Telescope for fuzzy finding
  {
    "nvim-telescope/telescope.nvim",
    dependencies = {
      "nvim-lua/plenary.nvim",
      { "nvim-telescope/telescope-fzf-native.nvim", build = "make" },
    },
    config = function()
      require("telescope").setup({
        defaults = {
          file_ignore_patterns = { "node_modules", ".git" },
          mappings = {
            i = {
              ["<C-j>"] = "move_selection_next",
              ["<C-k>"] = "move_selection_previous",
            },
          },
        },
        extensions = {
          fzf = {
            fuzzy = true,
            override_generic_sorter = true,
            override_file_sorter = true,
            case_mode = "smart_case",
          },
        },
      })
      require("telescope").load_extension("fzf")
    end,
  },

  -- Treesitter for syntax highlighting
  {
    "nvim-treesitter/nvim-treesitter",
    build = ":TSUpdate",
    config = function()
      require("nvim-treesitter.configs").setup({
        ensure_installed = {
          "lua", "python", "c", "cpp", "javascript", "typescript", "html", "css",
          "json", "bash", "markdown", "yaml", "rust", "go"
        },
        highlight = {
          enable = true,
          additional_vim_regex_highlighting = false,
        },
        indent = {
          enable = true,
        },
      })
    end,
  },

  -- Mason LSP installer
  {
    "williamboman/mason.nvim",
    config = function()
      require("mason").setup({
        ui = {
          border = "rounded",
          icons = {
            package_installed = "✓",
            package_pending = "➜",
            package_uninstalled = "✗",
          },
        },
      })
      -- Ensure these tools are installed
      local ensure_installed = {
        "lua-language-server",
        "pyright",
        "clangd",
        "typescript-language-server",
        "html-lsp",
        "css-lsp",
        "json-lsp",
        "rust-analyzer",
        "codelldb",
      }

      local mr = require("mason-registry")
      for _, tool in ipairs(ensure_installed) do
        local p = mr.get_package(tool)
        if not p:is_installed() then
          p:install()
        end
      end
    end,
  },

  -- Mason-lspconfig bridge
  {
    "williamboman/mason-lspconfig.nvim",
    dependencies = { "williamboman/mason.nvim" },
    config = function()
      require("mason-lspconfig").setup({
        ensure_installed = {
          "lua_ls",
          "pyright",
          "clangd",
          "ts_ls",
          "html",
          "cssls",
          "jsonls",
          "rust_analyzer",
        },
        automatic_installation = true,
      })
    end,
  },

  -- LSP Configuration
  {
    "neovim/nvim-lspconfig",
    dependencies = {
      "williamboman/mason-lspconfig.nvim",
      "hrsh7th/cmp-nvim-lsp",
      "simrat39/rust-tools.nvim",
    },
    config = function()
      -- LSP keybindings
      vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, { desc = "Go to declaration" })
      vim.keymap.set('n', 'gd', vim.lsp.buf.definition, { desc = "Go to definition" })
      vim.keymap.set('n', 'K', vim.lsp.buf.hover, { desc = "Hover information" })
      vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, { desc = "Go to implementation" })
      vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, { desc = "Signature help" })
      vim.keymap.set('n', '<leader>rn', vim.lsp.buf.rename, { desc = "Rename symbol" })
      vim.keymap.set('n', '<leader>ca', vim.lsp.buf.code_action, { desc = "Code actions" })
      vim.keymap.set('n', 'gr', vim.lsp.buf.references, { desc = "Find references" })

      -- Get capabilities from cmp_nvim_lsp
      local capabilities = require('cmp_nvim_lsp').default_capabilities()

      -- Setup basic LSP servers
      require("lspconfig").lua_ls.setup({
        capabilities = capabilities,
        settings = {
          Lua = {
            diagnostics = {
              globals = { "vim" },
            },
          },
        },
      })

      require("lspconfig").pyright.setup({
        capabilities = capabilities,
        settings = {
          python = {
            analysis = {
              autoSearchPaths = true,
              useLibraryCodeForTypes = true,
              diagnosticMode = "workspace",
            },
          },
        },
      })

      -- Setup other standard LSP servers
      local servers = { "clangd", "ts_ls", "html", "cssls", "jsonls" }
      for _, lsp in ipairs(servers) do
        require("lspconfig")[lsp].setup({
          capabilities = capabilities,
        })
      end

      -- Special setup for Rust with rust-tools
      require("rust-tools").setup({
        tools = {
          inlay_hints = {
            auto = true,
            show_parameter_hints = true,
          },
          hover_actions = {
            auto_focus = true,
          },
        },
        server = {
          capabilities = capabilities,
          on_attach = function(client, bufnr)
            -- Enable inlay hints
            if client.server_capabilities.inlayHintProvider then
              vim.lsp.inlay_hint.enable(true, { bufnr = bufner })
            end

            -- Make sure formatting is enabled
            client.server_capabilities.documentFormattingProvider = true

            -- Add format on save specifically for Rust files
            vim.api.nvim_create_autocmd("BufWritePre", {
              buffer = bufnr,
              callback = function()
                vim.lsp.buf.format({ bufnr = bufnr, async = false })
              end,
            })

            -- Rust specific keybindings
            vim.keymap.set("n", "<leader>rr", require("rust-tools").runnables.runnables,
              { buffer = bufnr, desc = "Rust Runnables" })
            vim.keymap.set("n", "<leader>rd", require("rust-tools").debuggables.debuggables,
              { buffer = bufnr, desc = "Rust Debuggables" })
            vim.keymap.set("n", "<leader>re", require("rust-tools").expand_macro.expand_macro,
              { buffer = bufnr, desc = "Expand Macro" })
          end,
          settings = {
            ["rust-analyzer"] = {
              imports = {
                granularity = {
                  group = "module",
                },
                prefix = "self",
              },
              cargo = {
                buildScripts = {
                  enable = true,
                },
                features = "all",
              },
              procMacro = {
                enable = true
              },
              checkOnSave = {
                command = "clippy",
                allFeatures = true,
                extraArgs = { "--", "-W", "clippy::all" },
              },
              diagnostics = {
                enable = true,
                enableExperimental = true,
              },
              check = {
                command = "clippy",
                features = "all",
              },
              assist = {
                importGranularity = "module",
                importPrefix = "self",
              },
              inlayHints = {
                lifetimeElisionHints = {
                  enable = "always",
                },
                reborrowHints = {
                  enable = "always",
                },
              },
            }
          },
        },
      })
    end,
  },

  -- null-ls for formatting
  {
    "nvimtools/none-ls.nvim",
    dependencies = { "nvim-lua/plenary.nvim" },
    config = function()
      local null_ls = require("null-ls")

      -- Simple setup with just the most reliable formatters
      null_ls.setup({
        sources = {
          null_ls.builtins.formatting.stylua,
          null_ls.builtins.formatting.prettier,
          -- Removed rustfmt to avoid issues
        },
      })

      -- Format on save for non-Rust files
      vim.api.nvim_create_autocmd("BufWritePre", {
        pattern = { "*.lua", "*.js", "*.ts", "*.jsx", "*.tsx", "*.json", "*.html", "*.css" },
        callback = function()
          vim.lsp.buf.format({ async = false })
        end,
      })
    end,
  },

  -- Autocompletion
  {
    "hrsh7th/nvim-cmp",
    dependencies = {
      "hrsh7th/cmp-nvim-lsp",
      "hrsh7th/cmp-buffer",
      "hrsh7th/cmp-path",
      "hrsh7th/cmp-cmdline",
      "L3MON4D3/LuaSnip",
      "saadparwaiz1/cmp_luasnip",
      "rafamadriz/friendly-snippets",
    },
    config = function()
      local cmp = require("cmp")
      local luasnip = require("luasnip")
      require("luasnip.loaders.from_vscode").lazy_load()
      cmp.setup({
        snippet = {
          expand = function(args)
            luasnip.lsp_expand(args.body)
          end,
        },
        mapping = cmp.mapping.preset.insert({
          ["<C-b>"] = cmp.mapping.scroll_docs(-4),
          ["<C-f>"] = cmp.mapping.scroll_docs(4),
          ["<C-Space>"] = cmp.mapping.complete(),
          ["<C-e>"] = cmp.mapping.abort(),
          ["<CR>"] = cmp.mapping.confirm({ select = false }),
          ["<Tab>"] = cmp.mapping(function(fallback)
            if cmp.visible() then
              cmp.select_next_item()
            elseif luasnip.expand_or_jumpable() then
              luasnip.expand_or_jump()
            else
              fallback()
            end
          end, { "i", "s" }),
          ["<S-Tab>"] = cmp.mapping(function(fallback)
            if cmp.visible() then
              cmp.select_prev_item()
            elseif luasnip.jumpable(-1) then
              luasnip.jump(-1)
            else
              fallback()
            end
          end, { "i", "s" }),
        }),
        sources = cmp.config.sources({
          { name = "nvim_lsp" },
          { name = "luasnip" },
          { name = "buffer" },
          { name = "path" },
        }),
        formatting = {
          format = function(entry, vim_item)
            vim_item.menu = ({
              nvim_lsp = "[LSP]",
              luasnip = "[Snippet]",
              buffer = "[Buffer]",
              path = "[Path]",
            })[entry.source.name]
            return vim_item
          end,
        },
        window = {
          completion = cmp.config.window.bordered(),
          documentation = cmp.config.window.bordered(),
        },
      })
    end,
  },
  -- Status line
  {
    "nvim-lualine/lualine.nvim",
    dependencies = { "nvim-tree/nvim-web-devicons" },
    config = function()
      require("lualine").setup({
        options = {
          component_separators = { left = "", right = "" },
          section_separators = { left = "", right = "" },
          globalstatus = true,
        },
      })
    end,
  },

  -- Autopairs
  {
    "windwp/nvim-autopairs",
    config = function()
      require("nvim-autopairs").setup()
    end,
  },
})

-- Key mappings (NvChad-like)
-- File explorer
vim.keymap.set("n", "<leader>e", ":NvimTreeToggle<CR>", { silent = true, desc = "Toggle NvimTree" })
vim.keymap.set("n", "<leader>o", ":NvimTreeFocus<CR>", { silent = true, desc = "Focus NvimTree" })

-- Buffer navigation
vim.keymap.set("n", "<leader>x", ":bdelete<CR>", { silent = true, desc = "Close buffer" })
vim.keymap.set("n", "<Tab>", ":BufferLineCycleNext<CR>", { silent = true, desc = "Next buffer" })
vim.keymap.set("n", "<S-Tab>", ":BufferLineCyclePrev<CR>", { silent = true, desc = "Previous buffer" })

-- Telescope
vim.keymap.set("n", "<leader>ff",
  ":Telescope find_files hidden=true find_command=rg,--files,--hidden,--glob,!**/.git/*<CR>",
  { silent = true, desc = "Find files" })
vim.keymap.set("n", "<leader>fg", ":Telescope live_grep hidden=true find_command=rg,--files,--hidden,--glob,!**/.git<CR>",
  { silent = true, desc = "Live grep" })
vim.keymap.set("n", "<leader>fb", ":Telescope buffers hidden=true find_command=rg,--files,--hidden,--glob,!**/.git<CR>",
  { silent = true, desc = "Find buffers" })
vim.keymap.set("n", "<leader>fh", ":Telescope help_tags<CR>", { silent = true, desc = "Help tags" })
vim.keymap.set("n", "<leader>fo", ":Telescope oldfiles hidden=true find_command=rg,--files,--hidden,--glob,!**/.git<CR>",
  { silent = true, desc = "Recent files" })
vim.keymap.set("n", "<leader>fr", ":Telescope resume<CR>", { silent = true, desc = "Recent files" })

-- Window navigation
vim.keymap.set("n", "<C-h>", "<C-w>h", { desc = "Move to left window" })
vim.keymap.set("n", "<C-j>", "<C-w>j", { desc = "Move to bottom window" })
vim.keymap.set("n", "<C-k>", "<C-w>k", { desc = "Move to top window" })
vim.keymap.set("n", "<C-l>", "<C-w>l", { desc = "Move to right window" })

-- Resize windows
vim.keymap.set("n", "<C-Up>", ":resize +2<CR>", { silent = true, desc = "Increase window height" })
vim.keymap.set("n", "<C-Down>", ":resize -2<CR>", { silent = true, desc = "Decrease window height" })
vim.keymap.set("n", "<C-Left>", ":vertical resize -2<CR>", { silent = true, desc = "Decrease window width" })
vim.keymap.set("n", "<C-Right>", ":vertical resize +2<CR>", { silent = true, desc = "Increase window width" })

-- Other useful mappings
vim.keymap.set("n", "<leader>w", ":w<CR>", { silent = true, desc = "Save" })
vim.keymap.set("n", "<leader>q", ":q<CR>", { silent = true, desc = "Quit" })
vim.keymap.set("n", "<Esc>", ":noh<CR>", { silent = true, desc = "Clear highlights" })

-- Open current buffer in vertical and horizontal split
vim.keymap.set('n', '<leader>vv', ':vsplit<CR>', { noremap = true, silent = true })
vim.keymap.set('n', '<leader>hh', ':split<CR>', { noremap = true, silent = true })
-- Convert all splits to tabs (each window becomes its own tab)
vim.keymap.set('n', '<leader>tt', '<C-w>T', { noremap = true, silent = true })

-- Configure LSP diagnostic appearance (minimal)
vim.diagnostic.config({
  virtual_text = {
    prefix = '●',
    spacing = 4,
  },
  signs = true,
  underline = true,
  update_in_insert = false,
  severity_sort = true,
  float = {
    border = "rounded",
    source = "always",
  },
})

vim.keymap.set("n", "<leader>d", function()
  vim.diagnostic.open_float(0, { scope = "line" })
end, { silent = true, desc = "Show diagnostics" })
-- Define compact diagnostic symbols
local signs = { Error = " ", Warn = " ", Hint = " ", Info = " " }
for type, icon in pairs(signs) do
  local hl = "DiagnosticSign" .. type
  vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = "" })
end

-- Check if rustfmt is installed via rustup and show a reminder if not
if vim.fn.executable("rustfmt") ~= 1 then
  vim.api.nvim_create_autocmd("VimEnter", {
    once = true,
    callback = function()
      vim.notify(
        "rustfmt not found. Please install rustfmt using:\n" ..
        "rustup component add rustfmt",
        vim.log.levels.WARN,
        { title = "Rust Setup" }
      )
    end
  })
end
-- Check if rustfmt is installed via rustup and show a reminder if not
if vim.fn.executable("rustfmt") ~= 1 then
  vim.api.nvim_create_autocmd("VimEnter", {
    once = true,
    callback = function()
      vim.notify(
        "rustfmt not found. Please install rustfmt using:\n" ..
        "rustup component add rustfmt",
        vim.log.levels.WARN,
        { title = "Rust Setup" }
      )
    end
  })
end
